/* for browser performance it's best to only ever animate 2 properties. 
Browsers are optimised for opacity & transform properties to be animated */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }
  /* does some mad shit
  60% {
      transform: rotate(120deg);
  }
  */
  80% {
    transform: translateX(1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  80% {
    transform: translateX(-1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}
/*  asterix is the universal selector,
*   all elements on the page will be given these values.
*   Here it is used to perform a browser basic reset to ensure
*   all browsers render the same CSS.
*
*   By default, some browsers will apply their own margin/padding to certain elements.
*   I.e. H1 tags might be given some margin/padding.
*   This resets so all is determined by us.
*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; /* now box-sizing will be an inherited property */
}

html {
  font-size: 62.5%; /* sets default font size on html tag to 62.5% of browser default font-size (which is usually 16px, so this will be 10px), this impacts all rem values */
}

body {
  box-sizing: border-box; /* with this borders are not appended to the total width or height that we specify for a box. */
}

body {
  /* font settings will be inherited by all child elements on the page */
  font-family: "Lato", sans-serif;
  font-weight: 400; /* as per the import in index.html we only have Lato font weights of: 100,300,400,700,900 */
  font-size: 1.6rem;
  line-height: 1.7; /* 1.7 times the default line height */
  color: #777;
  padding: 3rem; /* padding is not inherited, this just applies padding to the whole page body */
  box-sizing: border-box; /* with this borders are not appended to the total width or height that we specify for a box. */
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /*  */
  backface-visibility: hidden; /* animations can sometimes cause little shifts when they end. No one really knows why. This fixes it. */
  margin-bottom: 6rem;
}
.heading-primary--main {
  display: block; /* block level elements take the full width of their parent and therefore forces a linebreak */
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  animation-name: moveInLeft;
  animation-duration: 1s;
  /* ease-in = slow start and speeds up */
  /* ease-out = fast start and slows down */
  animation-timing-function: ease-out; /* https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function */
  /*
  animation-delay: 3s;            delays the start of the animation by 3 seconds
  animation-iteration-count: 3;   runs the animation 3 times
  */
}
.heading-primary--sub {
  display: block; /* block level elements take the full width of their parent and add a line break at the end of themselves */
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
  animation-name: moveInRight;
  animation-duration: 1s;
  animation-timing-function: ease-out;
}

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  background-clip: text;
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: 0.2rem;
  transition: all 0.2s;
}
.heading-secondary:hover {
  transform: skewY(2deg) skewX(15deg) scale(1.1);
  text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2);
}

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase;
}

.paragraph {
  font-size: 1.6rem;
}
.paragraph:not(:last-child) {
  margin-bottom: 3rem;
}

.u-center-text {
  text-align: center;
}

.u-margin-bottom-big {
  margin-bottom: 8rem;
}

.u-margin-bottom-medium {
  margin-bottom: 4rem;
}

.u-margin-bottom-small {
  margin-bottom: 1.5rem;
}

.u-margin-top-big {
  margin-top: 8rem;
}

.u-margin-top-huge {
  margin-top: 10rem;
}

.btn {
  /* link here is a pseudo class. Pseudo classes are special states of a selector. We use pseudo classes to style elements under a special condition */
  /* Other examples might include :hover, :first-child, :checked */
  /* after here is a pseudo element. The trick here is adding a button which looks like the actual button and hide it behind it */
}
.btn:link, .btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem; /* 15px top/bottom 40px left/right*/
  display: inline-block; /* applied so that padding doesn't cause overlap with other elements.
 Also inline-block elements are treated as text so this is centered with text-center on the .textbox */
  border-radius: 10rem;
  transition: all 0.2s; /* .2s transition will be applied on all pseudoclass states (hover, active) */
  position: relative;
  font-size: 1.6rem;
}
.btn--white {
  background-color: #fff;
  color: #777;
}
.btn--white::after {
  background-color: #fff;
  color: #777;
}
.btn--green {
  background-color: #55c57a;
  color: #fff;
}
.btn--green::after {
  background-color: #55c57a;
}
.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); /* 0 shadow offset in x direction. 10px offset in y. 20px blur (makes shadow larger) */
  /* when we want hover the button, we apply these styles to the 'after' pseudoelement */
}
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6); /* scales 1.4 times original size on x and 1.6 on y */
  opacity: 0;
}
.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); /* in relation to hover pseudoclass, this makes the button look like it's being pushed down as it's "closer" to the page */
}
.btn::after {
  content: "";
  display: inline-block;
  height: 100%; /* pseudo element is basically treated as a child element of the base element */
  width: 100%;
  border-radius: 10rem;
  /* positions the pseudoelement behind the button */
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}
.btn--animated {
  animation: moveInBottom 0.5s ease-out 0.75s;
  animation-fill-mode: backwards; /* applies the animations of the 0% keyframes before the animation starts */
}

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all 0.2s;
}
.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px);
}
.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(0);
}

.composition {
  position: relative;
}
.composition__photo {
  width: 55%;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
  border-radius: 2px;
  position: absolute;
  z-index: 10;
  transition: all 0.2s;
  outline-offset: 2rem;
}
.composition__photo--p1 {
  left: 0;
  top: -2rem;
}
.composition__photo--p2 {
  right: 0;
  top: 2rem;
}
.composition__photo--p3 {
  left: 20%;
  top: 10rem;
}
.composition__photo:hover {
  outline: 1.5rem solid #55c57a;
  transform: scale(1.05) translateY(-0.5rem);
  box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
  z-index: 20;
}
.composition:hover .composition__photo:not(:hover) {
  transform: scale(0.95);
}

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: transform 0.3s;
}
.feature-box__icon {
  font-size: 6rem;
  margin-bottom: 0.5rem;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  background-clip: text;
  -webkit-background-clip: text;
  color: transparent;
}
.feature-box:hover {
  transform: translateY(-1.5rem) scale(1.03);
}

.card {
  perspective: 150rem;
  -moz-perspective: 150rem;
  position: relative;
  height: 52rem;
}
.card__side {
  height: 52rem;
  transition: all 0.8s ease;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  backface-visibility: hidden;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  overflow: hidden;
}
.card__side--front {
  background-color: #fff;
}
.card__side--back {
  transform: rotateY(180deg);
}
.card__side--back-1 {
  background-image: linear-gradient(to right bottom, #ffb900, #ff7730);
}
.card__side--back-2 {
  background-image: linear-gradient(to right bottom, #7ed56f, #28b485);
}
.card__side--back-3 {
  background-image: linear-gradient(to right bottom, #2998ff, #5643fa);
}
.card:hover .card__side--front {
  transform: rotateY(-180deg);
}
.card:hover .card__side--back {
  transform: rotateY(0deg);
}
.card__picture {
  background-size: cover;
  height: 23rem;
  background-blend-mode: screen;
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
  clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
  border-top-left-radius: 3px;
  border-top-right-radius: 3px;
}
.card__picture--1 {
  background-image: linear-gradient(to right bottom, #ffb900, #ff7730), url(../img/nat-5.jpg);
}
.card__picture--2 {
  background-image: linear-gradient(to right bottom, #7ed56f, #28b485), url(../img/nat-6.jpg);
}
.card__picture--3 {
  background-image: linear-gradient(to right bottom, #2998ff, #5643fa), url(../img/nat-7.jpg);
}
.card__heading {
  font-size: 2.8rem;
  font-weight: 300;
  text-transform: uppercase;
  text-align: right;
  color: #fff;
  position: absolute;
  top: 12rem;
  right: 2rem;
  width: 75%;
}
.card__heading-span {
  padding: 1rem 1.5rem;
  -webkit-box-decoration-break: clone;
  box-decoration-break: clone;
}
.card__heading-span--1 {
  background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.85), rgba(255, 119, 48, 0.85));
}
.card__heading-span--2 {
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.85), rgba(40, 180, 133, 0.85));
}
.card__heading-span--3 {
  background-image: linear-gradient(to right bottom, rgba(41, 152, 255, 0.85), rgba(86, 67, 250, 0.85));
}
.card__details {
  padding: 3rem;
}
.card__details ul {
  list-style: none;
  width: 80%;
  margin: 0 auto;
}
.card__details ul li {
  text-align: center;
  font-size: 1.5rem;
  padding: 1rem;
}
.card__details ul li:not(:last-child) {
  border-bottom: 1px solid #eee;
}
.card__cta {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 90%;
  text-align: center;
}
.card__price-box {
  text-align: center;
  color: #fff;
  margin-bottom: 8rem;
}
.card__price-only {
  font-size: 1.4rem;
  text-transform: uppercase;
}
.card__price-value {
  font-size: 6rem;
  font-weight: 100;
}

.row {
  max-width: 114rem;
  margin: 0 auto;
}
.row:not(:last-child) {
  margin-bottom: 8rem;
}
.row::after {
  content: "";
  display: table;
  clear: both;
}
.row [class^=col-] {
  float: left; /* float columns to the left side */
}
.row [class^=col-]:not(:last-child) {
  margin-right: 6rem;
}
.row .col-1-of-2 {
  /* width of the col will be 100% minus the horizontal gutter we want divided by 2 (because this is column 1 of 2) */
  width: calc((100% - 6rem) / 2);
}
.row .col-1-of-3 {
  width: calc((100% - 6rem * 2) / 3);
}
.row .col-2-of-3 {
  width: calc(2 * ((100% - 6rem * 2) / 3) + 6rem);
}
.row .col-1-of-4 {
  width: calc((100% - 6rem * 3) / 4);
}
.row .col-2-of-4 {
  width: calc(2 * ((100% - 6rem * 3) / 4) + 6rem);
}
.row .col-3-of-4 {
  width: calc(3 * (100% - 6rem * 3) / 4 + (2 * 6rem));
}

.header {
  height: 95vh; /* 95% of the viewport height */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg); /* One level beneath the colour gradient is this image. */
  background-size: cover;
  background-position: top; /* ensures that the top of the image is not cropped when viewport dimensions change 
(try changing to bottom or center to see) */
  /* with clip-path you can use polygon to define the coordinates of points to include in a shape
   and clip-path will cut that shape out of the div it's applied to. */
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* clip-path: polygon(0 0, 100% 50%, 0 100%); /*- makes a triangle */
  /* clip-path: polygon(0 33%, 33% 0, 66% 0, 100% 33%, 100% 66%, 66% 100%, 33% 100%, 0 66%); /* makes an irregular hexagon */
  position: relative;
}
.header__logo-box {
  /* logo-box will be positioned absolutely, pushing 40px off the top and left of the nearest parent element with 'position: relative' */
  position: absolute;
  top: 4rem;
  left: 4rem;
}
.header__logo {
  height: 3.5rem;
}
.header__text-box {
  position: absolute;
  top: 50%;
  left: 50%; /* Start coords of div are positioned absolutely (50% push top&left) relative to their parents */
  transform: translate(-50%, -50%); /* Now to push the div back a bit so that its center is in the center of its parents. 
   Transform and translate are relative to the div itself, 
   meaning the div gets pushed back 50% on itself on each axis */
  text-align: center;
}

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh;
}

.section-features {
  padding: 20rem 0;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/nat-4.jpg);
  background-size: cover;
  transform: skewY(-7deg);
  margin-top: -10rem;
}
.section-features > * {
  transform: skewY(7deg);
}

.section-tours {
  background-color: #f7f7f7;
  padding: 25rem 0 15rem 0;
  margin-top: -10rem;
}/*# sourceMappingURL=main.css.map */